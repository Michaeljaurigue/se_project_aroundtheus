!function(){"use strict";var e=class{constructor(e,t){this._settings=e,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_handleInputChange(e){this._checkInputValidity(e),this._toggleButtonState()}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._handleInputChange(e)}))}))}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}};console.log();const t={formSelector:".form",formFieldsetSelector:".form__fieldset",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible",errorSelector:".form__error"};document.querySelector(".cards__list");var s=class{constructor(e){this._selector=e,this._closeButton=this._selector.querySelector(".modal__close-button"),this._handleEscapeClose=this._handleEscClose.bind(this),this._handleRemoteClickClose=this._handleRemoteClickClose.bind(this),this._closePopup=this.close.bind(this)}open(){this._selector.classList.add("modal__opened"),this._setEventListeners()}close(){this._selector.classList.remove("modal__opened"),this._removeEventListeners()}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleRemoteClickClose(e){e.target===e.currentTarget&&this.close()}_setEventListeners(){document.addEventListener("keydown",this._handleEscapeClose),this._selector.addEventListener("mousedown",this._handleRemoteClickClose),this._closeButton.addEventListener("click",this._closePopup)}_removeEventListeners(){document.removeEventListener("keydown",this._handleEscapeClose),this._selector.removeEventListener("mousedown",this._handleRemoteClickClose),this._closeButton.removeEventListener("click",this._closePopup)}};var r=class extends s{constructor(e,t){var s,r,i;super(e),s=this,i=e=>{e.preventDefault();const t=this._getInputValues();this._handleOnSubmit(t)},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_handleSubmit"))in s?Object.defineProperty(s,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):s[r]=i,this._handleOnSubmit=t,this._formSelector=this._selector.querySelector(".form"),this._submitButton=this._selector.querySelector(".form__submit-button"),this.currentButtonText=this._submitButton.textContent}_getInputValues(){const e=[...this._formSelector.querySelectorAll(".form__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}_setEventListeners(){super._setEventListeners(),this._formSelector.addEventListener("submit",this._handleSubmit)}_removeEventListeners(){super._removeEventListeners(),this._formSelector.removeEventListener("submit",this._handleSubmit)}close(){super.close(),this._formSelector.reset()}toggleIsSaving(e){this._submitButton.textContent=e?"Saving...":this.currentButtonText}};console.log();const i=document.querySelector(".modal_edit"),n=document.querySelector(".modal_add-card"),o=document.querySelector(".modal_profile"),a=document.querySelector(".modal_image"),l=document.querySelector(".modal_confirm"),c=i.querySelector(".form"),h=n.querySelector(".form"),_=o.querySelector(".form"),u=document.querySelector(".profile"),d=u.querySelector(".profile__edit-button"),m=u.querySelector(".profile__add-button"),p=u.querySelector(".profile__image-button"),v=i.querySelector(".form__input_type_name"),g=i.querySelector(".form__input_type_about");let f;const b=new class{constructor(e,t){var s,r,i;s=this,i=e=>e.ok?e.json():(console.log(`Error: ${e.status}`),Promise.reject(`Error: ${e.status}`)),(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_processServerResponse"))in s?Object.defineProperty(s,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):s[r]=i,this._baseURL=e,this._authToken=t,this._headers={authorization:t,"Content-Type":"application/json"}}async _request(e,t){const s=await fetch(e,t);return this._processServerResponse(s)}async getInitialCards(){const e=await fetch(`${this._baseURL}/cards`,{method:"GET",headers:this._headers});return this._processServerResponse(e)}async getUserInfo(){const e=await fetch(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers});return this._processServerResponse(e)}async getApiInfo(){const e=await Promise.all([this.getUserInfo(),this.getInitialCards()]);return this._processServerResponse(e)}async setUserInfo(e){const t=await fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})});return this._processServerResponse(t)}async setAvatar(e){const t=await fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})});return this._processServerResponse(t)}async addCard(e){const t=await fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})});return this._processServerResponse(t)}async deleteCard(e){const t=await fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers});return this._processServerResponse(t)}async addLike(e){const t=await fetch(`${this._baseURL}/cards/likes/${e}`,{method:"PUT",headers:this._headers});return this._processServerResponse(t)}async removeLike(e){const t=await fetch(`${this._baseURL}/cards/likes/${e}`,{method:"DELETE",headers:this._headers});return this._processServerResponse(t)}}("https://around.nomoreparties.co/v1/group-12","b66b9631-4780-4c88-b613-80a9a7c96739"),S=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}((function(e){return new class{constructor(e,t,s,r,i,n){this._name=e.name,this._link=e.link,this._alt=e.name,this._likes=e.likes,this._id=e._id,this._ownerId=e.owner._id,this._userId=n,this._cardSelector=t,this._handleCardLike=s,this._handleDisplayImage=r,this._handleDeleteCard=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getCardElement(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardText=this._element.querySelector(".card__title"),this._cardLikes=this._element.querySelector(".card__likes"),this._cardText.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._alt,this._cardLikes.textContent=this._likes.length,this._heartButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._imageButton=this._element.querySelector(".card__image"),this._assignCardButtons(),this._ownerId!==this._userId&&this._deleteButton.remove(),this._renderLikes(),this._element}_assignCardButtons(){this._heartButton.addEventListener("click",(()=>this._handleCardLike(this))),this._deleteButton.addEventListener("click",(()=>this._handleDeleteCard(this))),this._imageButton.addEventListener("click",(()=>this._handleDisplayImage(this._name,this._link)))}isLiked(){return this._likes?.some((e=>this._userId===e._id))}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this.isLiked()?this._heartButton.classList.add("card__like-button_active"):this._heartButton.classList.remove("card__like-button_active"),this._cardLikes.textContent=this._likes.length}handleDeleteLocalCard(){this._element.remove(),this._element=null}}(e,"#card",x,q,B,f).getCardElement()}),".cards"),y=new class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._picture=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e,t){this._name.textContent=e,this._about.textContent=t}setProfilePicture(e){this._picture.src=e}}(".profile__title",".profile__description",".profile__image"),E=new class extends s{constructor(e){super(e),this._image=this._selector.querySelector(".modal__image-img"),this._modalImageDescription=this._selector.querySelector(".modal__image-text")}open(e,t){super.open(),this._image.alt=e,this._image.src=t,this._modalImageDescription.textContent=e}}(a,w),L=new r(i,(function(e){L.toggleIsSaving(!0),b.setUserInfo(e).then((()=>{y.setUserInfo(e.name,e.about),L.close()})).catch((e=>{console.log(`Error: ${e.status}`)})).finally((()=>{L.toggleIsSaving(!1)}))})),C=new r(n,(function(e){e.name,e.link,C.toggleIsSaving(!0),b.addCard(e).then((e=>{S.addItem(e),C.close()})).catch((e=>{console.error("Error:",e)})).finally((()=>{C.toggleIsSaving(!1)}))})),k=new r(o,w),I=new class extends s{constructor(e){super(e),this._formSelector=this._selector.querySelector(".form"),this._submitButton=this._selector.querySelector(".form__submit-button"),this._submitButtonText=this._submitButton.textContent}setEventListeners(){super._setEventListeners(),this._formSelector.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()}))}setSubmit(e){this._handleSubmitCallback=e}toggleIsSaving(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}toggleIsDeleting(e){this._submitButton.textContent=e?"Deleting...":this._submitButtonText}removeEventListeners(){super._removeEventListeners(),this._formSelector.removeEventListener("submit",this._handleSubmit)}}(l);function q(e,t){E.open(e,t)}function w(e){console.log(e),k.toggleIsSaving(!0),b.setAvatar(e.avatar).then((()=>{y.setProfilePicture(e.avatar),k.close()})).catch((e=>{console.log("Error:",e)})).finally((()=>{k.toggleIsSaving(!1)}))}function B(e){I.open(),I.setSubmit((()=>{I.toggleIsDeleting(!0),b.deleteCard(e._id).then((()=>{e.handleDeleteLocalCard(),I.close()})).catch((e=>{console.error("Error:",e)})).finally((()=>{I.toggleIsDeleting(!1)}))}))}function x(e){e.isLiked()?b.removeLike(e._id).then((t=>e.updateLikes(t.likes))).catch((e=>{console.error("Error:",e)})):b.addLike(e._id).then((t=>e.updateLikes(t.likes))).catch((e=>{console.error("Error:",e)}))}I.setEventListeners(),Promise.all([b.getUserInfo(),b.getInitialCards()]).then((e=>{let[t,s]=e;f=t._id,y.setProfilePicture(t.avatar),y.setUserInfo(t.name,t.about),S.renderItems(s)})).catch((e=>{console.log(e)})),d.addEventListener("click",(function(){!function(){const e=y.getUserInfo();v.value=e.name,g.value=e.about}(),L.open(),R.resetValidation()})),m.addEventListener("click",(function(){C.open(),P.resetValidation()})),p.addEventListener("click",(function(){k.open(),T.resetValidation()}));const R=new e(t,c),P=new e(t,h),T=new e(t,_);R.enableValidation(),P.enableValidation(),T.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,